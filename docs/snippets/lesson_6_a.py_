:: 

    import time
    from valkka.valkka_core import *
    
    """
    main branch
    (LiveThread:livethread) --> {ForkFrameFilter3: fork_filter}
                                             |
                                branch 1 <---+ 
                                             |
                                branch 2 <---+
                                             |
                                branch 3 <---+
                                                                    
    branch 1 : recast
    --> {FifoFrameFilter:fifo_filter_1} --> [LiveFifo:live_fifo_1] -->> (LiveThread:livethread2_1) 
    
    branch 2 : save to disk
    --> (FileFrameFilter:file_filter_2)
    
    branch 3 : decode
    --> {FifoFrameFilter:fifo_filter_3} --> [FrameFifo: av_fifo_3] --->> (AVThread:avthread_3) --+
                                                                                                 |
     {ForkFrameFilter: fork_filter_3} <----------------------------------------------------------+
                     |
          branch 3.1 +--> {FifoFrameFilter:gl_in_filter_3_1} --> [OpenGLFrameFifo:gl_fifo_3_1] -->> (OpenGLThread:glthread_3_1) --> to two x-windows
                     |
          branch 3.2 +--> {IntervalFrameFilter: interval_filter_3_2} --> {SwScaleFrameFilter: sws_filter_3_2} --> {SharedMemFrameFilter: shmem_filter_3_2}
    """
    
    # *** branch 1 ***
    livethread2_1 =LiveThread("livethread2_1",20) # reserve stack for incoming frames
    live_fifo_1   =livethread2_1.getFifo()
    fifo_filter_1 =FifoFrameFilter("fifo_filter_1",live_fifo_1)
    out_ctx =LiveOutboundContext(LiveConnectionType_sdp, "224.1.168.91", 2, 50000) # frames with slot number 2 are sent to port 50000
    
    # *** branch 2 ***
    file_filter_2    =FileFrameFilter("file_filter_2")
    
    # ** branch 3.1 **
    glthread_3_1     =OpenGLThread ("glthread", 10, 10, 0, 0) # parameters are as follows: thread name, n720p, n1080p, n1440p, n4K
    gl_fifo_3_1      =glthread_3_1.getFifo()
    gl_in_filter_3_1 =FifoFrameFilter("gl_in_filter_3_1",gl_fifo_3_1)
    
    # ** branch 3.2 **
    image_interval=1000  # YUV => RGB interpolation to the small size is done each 1000 milliseconds and passed on to the shmem ringbuffer
    width  =1920//4      # CPU YUV => RGB interpolation
    height =1080//4      # CPU YUV => RGB interpolation
    cc     =3            # its rgb
    shmem_name    ="lesson_4"      # This identifies posix shared memory - must be unique
    shmem_bytes   =width*height*cc # Size for each element in the ringbuffer
    shmem_buffers =10              # Size of the shmem ringbuffer
    
    shmem_filter_3_2    =SharedMemFrameFilter(shmem_name, shmem_buffers, shmem_bytes) # shmem id, buffers, bytes per buffer
    sws_filter_3_2      =SwScaleFrameFilter("sws_filter", width, height, shmem_filter_3_2)
    interval_filter_3_2 =TimeIntervalFrameFilter("interval_filter", image_interval, sws_filter_3_2)
    
    # *** branch 3 ***
    av_fifo_3      =FrameFifo("av_fifo_3",10)
    fork_filter_3  =ForkFrameFilter("fork_filter_3", gl_in_filter_3_1, interval_filter_3_2)
    fifo_filter_3  =FifoFrameFilter("fifo_filter_3",av_fifo_3)
    avthread_3     =AVThread("avthread_3",av_fifo_3,fork_filter_3)
    
    # *** main branch ***
    livethread  =LiveThread("livethread_1")
    fork_filter =ForkFrameFilter3("fork_filter",fifo_filter_1,file_filter_2,fifo_filter_3)
    ctx =LiveConnectionContext(LiveConnectionType_rtsp, "rtsp://admin:nordic12345@192.168.1.41", 2, fork_filter) # stream from 192.168.1.41 is sent to fork_filter with slot number 2
    
    # start threads
    glthread_3_1   .startCall()
    avthread_3     .startCall()
    livethread     .startCall()
    livethread2_1  .startCall()
    
    # start decoding
    avthread_3 .decodingOnCall()
    
    livethread    .registerStreamCall(ctx) # receive frames
    livethread    .playStreamCall(ctx)
    # livethread2_1 .registerOutboundCall(out_ctx) # send frames
    
    # create two X windows
    window_id =glthread_3_1.createWindow()
    glthread_3_1.newRenderGroupCall(window_id)
    window_id2=glthread_3_1.createWindow()
    glthread_3_1.newRenderGroupCall(window_id2)
    
    # maps stream with slot 2 to window "window_id"
    context_id  =glthread_3_1.newRenderContextCall(2,window_id,0)
    # maps stream with slot 2 also to window "window_id2"
    context_id2 =glthread_3_1.newRenderContextCall(2,window_id2,0)
    
    # stream for 10 secs
    time.sleep(10)
    
    # .. after that start writing stream to disk
    file_filter_2.activate("kokkelis.mkv")
    
    # keep on streaming for 30 secs
    time.sleep(30)
    
    # close the file
    file_filter_2.deActivate()
    
    glthread_3_1.delRenderContextCall(context_id)
    glthread_3_1.delRenderContextCall(context_id2)
    glthread_3_1.delRenderGroupCall(window_id)
    glthread_3_1.delRenderGroupCall(window_id2)
    
    # stop decoding
    avthread_3 .decodingOffCall()
    
    # stop threads
    glthread_3_1   .stopCall()
    avthread_3     .stopCall()
    livethread     .stopCall()
    livethread2_1  .stopCall()
    
    # invokes the garbage collection => cpp level destructors
    glthread_3_1   =None
    avthread_3     =None
    livethread     =None
    livethread2_1  =None
    
    print("bye")
